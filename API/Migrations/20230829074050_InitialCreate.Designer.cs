// <auto-generated />
using System;
using API.Infrastructure.Classes;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace API.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20230829074050_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("API.Features.CoachRoutes.CoachRoute", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Abbreviation")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)");

                    b.Property<bool>("HasTransfer")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("PortId")
                        .HasColumnType("int");

                    b.Property<string>("PostAt")
                        .HasMaxLength(19)
                        .HasColumnType("varchar(19)");

                    b.Property<string>("PostUser")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("PutAt")
                        .HasMaxLength(19)
                        .HasColumnType("varchar(19)");

                    b.Property<string>("PutUser")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("PortId");

                    b.ToTable("CoachRoutes");
                });

            modelBuilder.Entity("API.Features.Customers.Customer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)")
                        .HasDefaultValue("");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)");

                    b.Property<string>("Email")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)")
                        .HasDefaultValue("");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("PersonInCharge")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)")
                        .HasDefaultValue("");

                    b.Property<string>("Phones")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)")
                        .HasDefaultValue("");

                    b.Property<string>("PostAt")
                        .HasMaxLength(19)
                        .HasColumnType("varchar(19)");

                    b.Property<string>("PostUser")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("Profession")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)")
                        .HasDefaultValue("");

                    b.Property<string>("PutAt")
                        .HasMaxLength(19)
                        .HasColumnType("varchar(19)");

                    b.Property<string>("PutUser")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("API.Features.Destinations.Destination", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Abbreviation")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("varchar(5)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("PostAt")
                        .HasMaxLength(19)
                        .HasColumnType("varchar(19)");

                    b.Property<string>("PostUser")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("PutAt")
                        .HasMaxLength(19)
                        .HasColumnType("varchar(19)");

                    b.Property<string>("PutUser")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.ToTable("Destinations");
                });

            modelBuilder.Entity("API.Features.Drivers.Driver", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Phones")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)")
                        .HasDefaultValue("");

                    b.Property<string>("PostAt")
                        .HasMaxLength(19)
                        .HasColumnType("varchar(19)");

                    b.Property<string>("PostUser")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("PutAt")
                        .HasMaxLength(19)
                        .HasColumnType("varchar(19)");

                    b.Property<string>("PutUser")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.ToTable("Drivers");
                });

            modelBuilder.Entity("API.Features.Genders.Gender", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("PostAt")
                        .HasMaxLength(19)
                        .HasColumnType("varchar(19)");

                    b.Property<string>("PostUser")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("PutAt")
                        .HasMaxLength(19)
                        .HasColumnType("varchar(19)");

                    b.Property<string>("PutUser")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.ToTable("Genders");
                });

            modelBuilder.Entity("API.Features.Nationalities.Nationality", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("PostAt")
                        .HasMaxLength(19)
                        .HasColumnType("varchar(19)");

                    b.Property<string>("PostUser")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("PutAt")
                        .HasMaxLength(19)
                        .HasColumnType("varchar(19)");

                    b.Property<string>("PutUser")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.ToTable("Nationalities");
                });

            modelBuilder.Entity("API.Features.Occupants.Occupant", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("PostAt")
                        .HasColumnType("longtext");

                    b.Property<string>("PostUser")
                        .HasColumnType("longtext");

                    b.Property<string>("PutAt")
                        .HasColumnType("longtext");

                    b.Property<string>("PutUser")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Occupants");
                });

            modelBuilder.Entity("API.Features.PickupPoints.PickupPoint", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("CoachRouteId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)");

                    b.Property<string>("ExactPoint")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("PostAt")
                        .HasMaxLength(19)
                        .HasColumnType("varchar(19)");

                    b.Property<string>("PostUser")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("PutAt")
                        .HasMaxLength(19)
                        .HasColumnType("varchar(19)");

                    b.Property<string>("PutUser")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("Remarks")
                        .HasMaxLength(2048)
                        .HasColumnType("varchar(2048)");

                    b.Property<string>("Time")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("varchar(5)");

                    b.HasKey("Id");

                    b.HasIndex("CoachRouteId");

                    b.ToTable("PickupPoints");
                });

            modelBuilder.Entity("API.Features.Ports.Port", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Abbreviation")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("varchar(5)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("PostAt")
                        .HasMaxLength(19)
                        .HasColumnType("varchar(19)");

                    b.Property<string>("PostUser")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("PutAt")
                        .HasMaxLength(19)
                        .HasColumnType("varchar(19)");

                    b.Property<string>("PutUser")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<int>("StopOrder")
                        .HasMaxLength(2)
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Ports");
                });

            modelBuilder.Entity("API.Features.Registrars.Registrar", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)")
                        .HasDefaultValue("");

                    b.Property<string>("Email")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)")
                        .HasDefaultValue("");

                    b.Property<string>("Fax")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)")
                        .HasDefaultValue("");

                    b.Property<string>("Fullname")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsPrimary")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Phones")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)")
                        .HasDefaultValue("");

                    b.Property<string>("PostAt")
                        .HasMaxLength(19)
                        .HasColumnType("varchar(19)");

                    b.Property<string>("PostUser")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("PutAt")
                        .HasMaxLength(19)
                        .HasColumnType("varchar(19)");

                    b.Property<string>("PutUser")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<int>("ShipId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ShipId");

                    b.ToTable("Registrars");
                });

            modelBuilder.Entity("API.Features.Reservations.Passenger", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("Birthdate")
                        .HasMaxLength(10)
                        .HasColumnType("date");

                    b.Property<string>("Firstname")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)");

                    b.Property<int>("GenderId")
                        .HasColumnType("int");

                    b.Property<bool>("IsBoarded")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Lastname")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)");

                    b.Property<int>("NationalityId")
                        .HasColumnType("int");

                    b.Property<int>("OccupantId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(2);

                    b.Property<string>("Remarks")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)")
                        .HasDefaultValue("");

                    b.Property<Guid>("ReservationId")
                        .HasMaxLength(36)
                        .HasColumnType("char(36)")
                        .IsFixedLength();

                    b.Property<string>("SpecialCare")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)")
                        .HasDefaultValue("");

                    b.HasKey("Id");

                    b.HasIndex("GenderId");

                    b.HasIndex("NationalityId");

                    b.HasIndex("OccupantId");

                    b.HasIndex("ReservationId");

                    b.ToTable("Passengers");
                });

            modelBuilder.Entity("API.Features.Reservations.Reservation", b =>
                {
                    b.Property<Guid>("ReservationId")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(36)
                        .HasColumnType("char(36)")
                        .IsFixedLength();

                    b.Property<int>("Adults")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("date");

                    b.Property<int>("DestinationId")
                        .HasColumnType("int");

                    b.Property<int?>("DriverId")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)")
                        .HasDefaultValue("");

                    b.Property<int>("Free")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<int>("Kids")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<string>("Phones")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)")
                        .HasDefaultValue("");

                    b.Property<int>("PickupPointId")
                        .HasColumnType("int");

                    b.Property<int>("PortId")
                        .HasColumnType("int");

                    b.Property<string>("PostAt")
                        .HasMaxLength(19)
                        .HasColumnType("varchar(19)");

                    b.Property<string>("PostUser")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("PutAt")
                        .HasMaxLength(19)
                        .HasColumnType("varchar(19)");

                    b.Property<string>("PutUser")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("RefNo")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(11)
                        .HasColumnType("varchar(11)")
                        .HasDefaultValue("");

                    b.Property<string>("Remarks")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)")
                        .HasDefaultValue("");

                    b.Property<int?>("ShipId")
                        .HasColumnType("int");

                    b.Property<string>("TicketNo")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)");

                    b.Property<int>("TotalPax")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("int")
                        .HasComputedColumnSql("((`Adults` + `Kids`) + `Free`)", false);

                    b.HasKey("ReservationId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("DestinationId");

                    b.HasIndex("DriverId");

                    b.HasIndex("PickupPointId");

                    b.HasIndex("PortId");

                    b.HasIndex("ShipId");

                    b.ToTable("Reservations");
                });

            modelBuilder.Entity("API.Features.Schedules.Schedule", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasMaxLength(10)
                        .HasColumnType("date");

                    b.Property<int>("DestinationId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("MaxPax")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<int>("PortId")
                        .HasColumnType("int");

                    b.Property<string>("PostAt")
                        .HasMaxLength(19)
                        .HasColumnType("varchar(19)");

                    b.Property<string>("PostUser")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("PutAt")
                        .HasMaxLength(19)
                        .HasColumnType("varchar(19)");

                    b.Property<string>("PutUser")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("Time")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("varchar(5)");

                    b.HasKey("Id");

                    b.HasIndex("DestinationId");

                    b.HasIndex("PortId");

                    b.ToTable("Schedules");
                });

            modelBuilder.Entity("API.Features.ShipCrews.ShipCrew", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("Birthdate")
                        .HasColumnType("date");

                    b.Property<string>("Firstname")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)");

                    b.Property<int>("GenderId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Lastname")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)");

                    b.Property<int>("NationalityId")
                        .HasColumnType("int");

                    b.Property<int>("OccupantId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.Property<string>("PostAt")
                        .HasMaxLength(19)
                        .HasColumnType("varchar(19)");

                    b.Property<string>("PostUser")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("PutAt")
                        .HasMaxLength(19)
                        .HasColumnType("varchar(19)");

                    b.Property<string>("PutUser")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<int>("ShipId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("GenderId");

                    b.HasIndex("NationalityId");

                    b.HasIndex("OccupantId");

                    b.HasIndex("ShipId");

                    b.ToTable("ShipCrews");
                });

            modelBuilder.Entity("API.Features.ShipOwners.ShipOwner", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)")
                        .HasDefaultValue("");

                    b.Property<string>("City")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)")
                        .HasDefaultValue("");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)");

                    b.Property<string>("Email")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)")
                        .HasDefaultValue("");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Phones")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)")
                        .HasDefaultValue("");

                    b.Property<string>("PostAt")
                        .HasMaxLength(19)
                        .HasColumnType("varchar(19)");

                    b.Property<string>("PostUser")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("Profession")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)")
                        .HasDefaultValue("");

                    b.Property<string>("PutAt")
                        .HasMaxLength(19)
                        .HasColumnType("varchar(19)");

                    b.Property<string>("PutUser")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("TaxNo")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)")
                        .HasDefaultValue("");

                    b.HasKey("Id");

                    b.ToTable("ShipOwners");
                });

            modelBuilder.Entity("API.Features.ShipRoutes.ShipRoute", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)");

                    b.Property<string>("FromPort")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)");

                    b.Property<string>("FromTime")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("varchar(5)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("PostAt")
                        .HasMaxLength(19)
                        .HasColumnType("varchar(19)");

                    b.Property<string>("PostUser")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("PutAt")
                        .HasMaxLength(19)
                        .HasColumnType("varchar(19)");

                    b.Property<string>("PutUser")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("ToPort")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)");

                    b.Property<string>("ToTime")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("varchar(5)");

                    b.Property<string>("ViaPort")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)")
                        .HasDefaultValue("");

                    b.Property<string>("ViaTime")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(5)
                        .HasColumnType("varchar(5)")
                        .HasDefaultValue("");

                    b.HasKey("Id");

                    b.ToTable("ShipRoutes");
                });

            modelBuilder.Entity("API.Features.Ships.Ship", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Abbreviation")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("varchar(5)");

                    b.Property<string>("Agent")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)")
                        .HasDefaultValue("");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)");

                    b.Property<string>("Flag")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)")
                        .HasDefaultValue("");

                    b.Property<string>("IMO")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)")
                        .HasDefaultValue("");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Manager")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)")
                        .HasDefaultValue("");

                    b.Property<string>("ManagerInGreece")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)")
                        .HasDefaultValue("");

                    b.Property<string>("PostAt")
                        .HasMaxLength(19)
                        .HasColumnType("varchar(19)");

                    b.Property<string>("PostUser")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("PutAt")
                        .HasMaxLength(19)
                        .HasColumnType("varchar(19)");

                    b.Property<string>("PutUser")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("RegistryNo")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)")
                        .HasDefaultValue("");

                    b.Property<int>("ShipOwnerId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ShipOwnerId");

                    b.ToTable("Ships");
                });

            modelBuilder.Entity("API.Infrastructure.Auth.Token", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClientId")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("ExpiryTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("UserId")
                        .HasColumnType("longtext");

                    b.Property<string>("Value")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Tokens");
                });

            modelBuilder.Entity("API.Infrastructure.Parameters.Parameter", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("ClosingTime")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("varchar(5)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)");

                    b.Property<string>("Phones")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)");

                    b.Property<string>("PostAt")
                        .HasColumnType("longtext");

                    b.Property<string>("PostUser")
                        .HasColumnType("longtext");

                    b.Property<string>("PutAt")
                        .HasColumnType("longtext");

                    b.Property<string>("PutUser")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Parameters");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("longtext");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("longtext");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("longtext");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("RoleId")
                        .HasColumnType("varchar(255)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Value")
                        .HasColumnType("longtext");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("API.Features.CoachRoutes.CoachRoute", b =>
                {
                    b.HasOne("API.Features.Ports.Port", "Port")
                        .WithMany("CoachRoutes")
                        .HasForeignKey("PortId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Port");
                });

            modelBuilder.Entity("API.Features.PickupPoints.PickupPoint", b =>
                {
                    b.HasOne("API.Features.CoachRoutes.CoachRoute", "CoachRoute")
                        .WithMany("PickupPoints")
                        .HasForeignKey("CoachRouteId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CoachRoute");
                });

            modelBuilder.Entity("API.Features.Registrars.Registrar", b =>
                {
                    b.HasOne("API.Features.Ships.Ship", "Ship")
                        .WithMany("Registrars")
                        .HasForeignKey("ShipId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Ship");
                });

            modelBuilder.Entity("API.Features.Reservations.Passenger", b =>
                {
                    b.HasOne("API.Features.Genders.Gender", "Gender")
                        .WithMany("Passengers")
                        .HasForeignKey("GenderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("API.Features.Nationalities.Nationality", "Nationality")
                        .WithMany("Passengers")
                        .HasForeignKey("NationalityId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("API.Features.Occupants.Occupant", "Occupant")
                        .WithMany("Passengers")
                        .HasForeignKey("OccupantId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("API.Features.Reservations.Reservation", "Reservation")
                        .WithMany("Passengers")
                        .HasForeignKey("ReservationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Gender");

                    b.Navigation("Nationality");

                    b.Navigation("Occupant");

                    b.Navigation("Reservation");
                });

            modelBuilder.Entity("API.Features.Reservations.Reservation", b =>
                {
                    b.HasOne("API.Features.Customers.Customer", "Customer")
                        .WithMany("Reservations")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("API.Features.Destinations.Destination", "Destination")
                        .WithMany("Reservations")
                        .HasForeignKey("DestinationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("API.Features.Drivers.Driver", "Driver")
                        .WithMany("Reservations")
                        .HasForeignKey("DriverId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("API.Features.PickupPoints.PickupPoint", "PickupPoint")
                        .WithMany("Reservations")
                        .HasForeignKey("PickupPointId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("API.Features.Ports.Port", "Port")
                        .WithMany("Reservations")
                        .HasForeignKey("PortId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("API.Features.Ships.Ship", "Ship")
                        .WithMany("Reservations")
                        .HasForeignKey("ShipId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Customer");

                    b.Navigation("Destination");

                    b.Navigation("Driver");

                    b.Navigation("PickupPoint");

                    b.Navigation("Port");

                    b.Navigation("Ship");
                });

            modelBuilder.Entity("API.Features.Schedules.Schedule", b =>
                {
                    b.HasOne("API.Features.Destinations.Destination", "Destination")
                        .WithMany("Schedules")
                        .HasForeignKey("DestinationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("API.Features.Ports.Port", "Port")
                        .WithMany("Schedules")
                        .HasForeignKey("PortId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Destination");

                    b.Navigation("Port");
                });

            modelBuilder.Entity("API.Features.ShipCrews.ShipCrew", b =>
                {
                    b.HasOne("API.Features.Genders.Gender", "Gender")
                        .WithMany("ShipCrews")
                        .HasForeignKey("GenderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("API.Features.Nationalities.Nationality", "Nationality")
                        .WithMany("ShipCrews")
                        .HasForeignKey("NationalityId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("API.Features.Occupants.Occupant", "Occupant")
                        .WithMany()
                        .HasForeignKey("OccupantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("API.Features.Ships.Ship", "Ship")
                        .WithMany("ShipCrews")
                        .HasForeignKey("ShipId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Gender");

                    b.Navigation("Nationality");

                    b.Navigation("Occupant");

                    b.Navigation("Ship");
                });

            modelBuilder.Entity("API.Features.Ships.Ship", b =>
                {
                    b.HasOne("API.Features.ShipOwners.ShipOwner", "ShipOwner")
                        .WithMany("Ships")
                        .HasForeignKey("ShipOwnerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ShipOwner");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("API.Features.CoachRoutes.CoachRoute", b =>
                {
                    b.Navigation("PickupPoints");
                });

            modelBuilder.Entity("API.Features.Customers.Customer", b =>
                {
                    b.Navigation("Reservations");
                });

            modelBuilder.Entity("API.Features.Destinations.Destination", b =>
                {
                    b.Navigation("Reservations");

                    b.Navigation("Schedules");
                });

            modelBuilder.Entity("API.Features.Drivers.Driver", b =>
                {
                    b.Navigation("Reservations");
                });

            modelBuilder.Entity("API.Features.Genders.Gender", b =>
                {
                    b.Navigation("Passengers");

                    b.Navigation("ShipCrews");
                });

            modelBuilder.Entity("API.Features.Nationalities.Nationality", b =>
                {
                    b.Navigation("Passengers");

                    b.Navigation("ShipCrews");
                });

            modelBuilder.Entity("API.Features.Occupants.Occupant", b =>
                {
                    b.Navigation("Passengers");
                });

            modelBuilder.Entity("API.Features.PickupPoints.PickupPoint", b =>
                {
                    b.Navigation("Reservations");
                });

            modelBuilder.Entity("API.Features.Ports.Port", b =>
                {
                    b.Navigation("CoachRoutes");

                    b.Navigation("Reservations");

                    b.Navigation("Schedules");
                });

            modelBuilder.Entity("API.Features.Reservations.Reservation", b =>
                {
                    b.Navigation("Passengers");
                });

            modelBuilder.Entity("API.Features.ShipOwners.ShipOwner", b =>
                {
                    b.Navigation("Ships");
                });

            modelBuilder.Entity("API.Features.Ships.Ship", b =>
                {
                    b.Navigation("Registrars");

                    b.Navigation("Reservations");

                    b.Navigation("ShipCrews");
                });
#pragma warning restore 612, 618
        }
    }
}
